'use strict';

var fs = require('fs');
var path = require('path');
var Funnel = require('broccoli-funnel');
var mergeTrees = require('broccoli-merge-trees');

function SASSPlugin(optionsFn) {
  this.name = 'ember-cli-sass';
  this.optionsFn = optionsFn;
  this.ext = ['scss', 'sass'];
}

function copyPreserveSync(src, dest) {
  var srcStats = fs.statSync(src);
  if (srcStats.isFile()) {
    var destDir = path.dirname(dest);
    var dirs = [];
    while (destDir && !fs.existsSync(destDir)) {
      dirs.unshift(destDir);
      destDir = path.dirname(destDir);
    }
    dirs.forEach(function (dir) {
      fs.mkdirSync(dir);
    });
    var content = fs.readFileSync(src);
    fs.writeFileSync(dest, content, { flag: 'wx' });
    fs.utimesSync(dest, srcStats.atime, srcStats.mtime);
  } else {
    throw new Error('Unexpected file type for ' + src);
  }
}

SASSPlugin.prototype.toTree = function(tree, inputPath, outputPath, inputOptions) {
  var ext = inputOptions.extension || 'scss';
  var paths = inputOptions.outputPaths;
  console.log((new Error()).stack);

  var trees = Object.keys(paths).map(function(file) {
    var input = file + '.' + ext;
    var output = paths[file];

    console.log(input, output)

    copyPreserveSync(
      path.join(process.cwd(), input),
      path.join(outputPath, output)
    );

    return new Funnel(outputPath, {
      files: [output]
    });
  });

  return mergeTrees(trees, { overwrite: true });
}

module.exports = {
  name: 'ember-cli-sass',

  setupPreprocessorRegistry: function(type, registry) {
    registry.add('css', new SASSPlugin(this.sassOptions.bind(this)));
  },

  sassOptions: function() {
    var env  = process.env.EMBER_ENV;
    var options = (this.app && this.app.options && this.app.options.sassOptions) || {};
    var envConfig = this.project.config(env).sassOptions;
    if (envConfig) {
      console.warn("Deprecation warning: sassOptions should be moved to your ember-cli-build");
      merge(options, envConfig);
    }

    if ((options.sourceMap === undefined) && (env == 'development')) {
      options.sourceMap = true;
    }

    if (options.sourceMap || options.sourceMapEmbed) {
      // we need to embed the sourcesContent in the source map until libsass has better support for broccoli-sass
      options.sourceMapContents = true;
    }

    options.outputFile = options.outputFile || this.project.name() + '.css';

    return options;
  },

  shouldSetupRegistryInIncluded: function() { return true; },

  included: function(app) {
    this._super.included.apply(this, arguments);
    this.app = app;

    if (this.shouldSetupRegistryInIncluded()) {
      this.setupPreprocessorRegistry('parent', app.registry);
    }
  }
}
