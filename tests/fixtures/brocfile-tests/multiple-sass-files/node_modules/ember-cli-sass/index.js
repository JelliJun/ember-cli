'use strict';

var path = require('path');
var Funnel = require('broccoli-funnel');
var mergeTrees = require('broccoli-merge-trees');

function SASSPlugin(optionsFn) {
  this.name = 'ember-cli-sass';
  this.optionsFn = optionsFn;
  this.ext = ['scss', 'sass'];
}

SASSPlugin.prototype.toTree = function(tree, inputPath, outputPath, inputOptions) {
  var extension = inputOptions.extension || 'scss';
  var appName = inputOptions.registry.app.name;
  var paths = [];

  if (inputOptions.outputPaths.app) {
    paths.push(inputOptions.outputPaths.app);
  } else {
    paths = Object.keys(inputOptions.outputPaths);
  }

  var trees = paths.map(function(file) {
    var sassFileRegex = new RegExp(extension + '$', 'g');

    return new Funnel(process.cwd() + inputPath, {
      destDir: outputPath,

      getDestinationPath: function(relativePath) {
        if (relativePath.indexOf('app.scss') !== -1) {
          return appName + '.css';
        }
        return relativePath.replace(sassFileRegex, 'css');
      }
    });
  });

  return mergeTrees(trees, { overwrite: true });
};

module.exports = {
  name: 'ember-cli-sass',

  setupPreprocessorRegistry: function(type, registry) {
    registry.add('css', new SASSPlugin(this.sassOptions.bind(this)));
  },

  sassOptions: function() {
    var env  = process.env.EMBER_ENV;
    var options = (this.app && this.app.options && this.app.options.sassOptions) || {};
    var envConfig = this.project.config(env).sassOptions;
    if (envConfig) {
      console.warn("Deprecation warning: sassOptions should be moved to your ember-cli-build");
      merge(options, envConfig);
    }

    if ((options.sourceMap === undefined) && (env == 'development')) {
      options.sourceMap = true;
    }

    if (options.sourceMap || options.sourceMapEmbed) {
      // we need to embed the sourcesContent in the source map until libsass has better support for broccoli-sass
      options.sourceMapContents = true;
    }

    options.outputFile = options.outputFile || this.project.name() + '.css';

    return options;
  },

  shouldSetupRegistryInIncluded: function() { return true; },

  included: function(app) {
    this._super.included.apply(this, arguments);
    this.app = app;

    if (this.shouldSetupRegistryInIncluded()) {
      this.setupPreprocessorRegistry('parent', app.registry);
    }
  }
}
